/*********************************************************************************
*FileName:40_CombinationSumII
*Author:  Javan_Z
*Version: 1.0
*Date:  2016.7.16
8ms, beats 80.05%
BackTracking functions well.
**********************************************************************************/
class Solution {
public:
	vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
		sort(candidates.begin(), candidates.end());
		vector<int> piece;
		vector<vector<int>> ans;
		backTracking(candidates, target, piece, ans, 0);
		return ans;
	}
	void backTracking(vector<int>& candidates, int target, vector<int>& piece, vector<vector<int>>& ans, int front) {
		if (!target) {
			ans.push_back(piece);
			return;
		}
		int i;
		for (i = front; i<candidates.size() && candidates[i] <= target; i++) {
			piece.push_back(candidates[i]);
			backTracking(candidates, target - candidates[i], piece, ans, i + 1); //加一是每个元素只能使用一次
			while (candidates[i] == candidates[i + 1])  //跳过重复元素
				i++;
			piece.pop_back();
		}
	}
};
