/*********************************************************************************
  *FileName:5_LongestPalindromicSubstring_DP_AC
  *Author:  WILL
  *Version: 4.0
  *Date:  2016.4.26
  DP ,AC
**********************************************************************************/
class Solution {
public:
    bool dp[1000][1000];
    string longestPalindrome(string s) {
        int i,j,max=1,start=0,len;
        memset(dp,false,sizeof(dp));
        for(i=0;i<s.size();i++)   //DP初始条件1
          dp[i][i]=true;
          
        for(i=0;i<s.size()-1;i++)  //DP初始条件2
          if(s[i]==s[i+1]){
              dp[i][i+1]=true;
              max=2;
              start=i;
          }    
         
        for(len=3;len<=s.size();len++)    //这里以长度首要去遍历，可以使DP很好的进行下去，因为每次i,j时i+1和j-1肯定已经算过了（因为长度更短） 
          for(i=0;i<=s.size()-len;i++){
              j=i+len-1;
              if(dp[i+1][j-1]&&s[i]==s[j]){
                  max=len;
                  start=i;
                  dp[i][j]=true;
              }
          }    
        return s.substr(start,max);
    }
};
    
