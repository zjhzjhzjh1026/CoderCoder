/*********************************************************************************
*FileName:81_SearchInRotatedSortedArrayII
*Author : Javan_Z
*Version : 1.0
*Date : 2016.9.10
The normal time complexity of this problem is O(logn), but when it comes to cases like
"1 1 3 1 1 1 1",we can't decide difference from "1 1 1 1 3 1",so we may just move left
forward one step, thus the time complexity decreases to O(N).
**********************************************************************************/
class Solution {
public:
	bool search(vector<int>& nums, int target) {
		int left = 0, right = nums.size() - 1;
		return recur(nums, target, left, right);
	}

	bool recur(vector<int>& nums, int tar, int left, int right) {
		//cout << left << right << endl;
		if (left == right) return nums[left] == tar ? true : false;
		int mid = left + (right - left) / 2;
		if (nums[mid] == tar) return true;
		if (nums[left]<nums[mid]) {   //case1
			if (nums[left] <= tar&&nums[mid]>tar) return recur(nums, tar, left, mid - 1);
			else return recur(nums, tar, mid + 1, right);
		}
		else if (nums[left]>nums[mid]) {  //case2
			if (nums[left]>tar&&nums[mid]<tar) return recur(nums, tar, mid + 1, right);
			else return recur(nums, tar, left, mid - 1);
		}
		else return recur(nums, tar, left + 1, right);   //case3
	}
};
