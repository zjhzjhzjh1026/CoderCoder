/*********************************************************************************
  *FileName:23_MergekSortedLists_Devide&Conquer
  *Author:  Javan_Z
  *Version: 1.0
  *Date:  2016.5.27
  72ms, beats 100.00%!! 
**********************************************************************************/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(!lists.size())
        return nullptr;
        while(lists.size()>1){
            lists.push_back(mergeTwoLists(lists[0],lists[1]));  //每次合并头两个数列，加到尾部，分治算法的思想 
            lists.erase(lists.begin());
            lists.erase(lists.begin());
        }
        return lists[0];
    }
    
    ListNode* mergeTwoLists(ListNode* l1,ListNode* l2){  //合并两个Sorted List的函数 
        if(!l1) return l2;
        if(!l2) return l1;
        if(l1->val<=l2->val){
            l1->next=mergeTwoLists(l1->next,l2); 
            return l1;
        }
        else{
            l2->next=mergeTwoLists(l2->next,l1); 
            return l2;
        }
    }
};
