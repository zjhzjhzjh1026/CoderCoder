/*********************************************************************************
*FileName:72_EditDistance_DP
*Author:  Javan_Z
*Version: 1.0
*Date:  2016.8.18
32ms, beats 21.71%
Two Corner Cases & Two Normal Cases
**********************************************************************************/
class Solution {     //dp[i]是从dp[0]开始递推的，，即是""的情况  
public:              //空间复杂度亦可被压缩到O(n)
	int minDistance(string word1, string word2) {
		int m = word1.size(), n = word2.size();
		vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
		for (int i = 1; i <= m; i++)  //2 Corner Cases
			dp[i][0] = i;
		for (int j = 1; j <= n; j++)
			dp[0][j] = j;
		for (int i = 1; i <= m; i++)
			for (int j = 1; j <= n; j++) {
				if (word1[i - 1] == word2[j - 1]) dp[i][j] = dp[i - 1][j - 1];    //新加位相同，则不需要额外steps
				else dp[i][j] = min(dp[i - 1][j] + 1, min(dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1));  //不同时的状态转移方程，包括用少位情况去添加、多位情况去删减以及同位数替换
			}
		return dp[m][n];
	}
};
