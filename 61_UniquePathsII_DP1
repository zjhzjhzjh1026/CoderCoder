/*********************************************************************************
*FileName:61_UniquePathsII_DP1
*Author:  Javan_Z
*Version: 1.0
*Date:  2016.8.16
4ms, beats 15.50%，fastest
Problem 60 with obstacle-check.
**********************************************************************************/
class Solution {
public:
	int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
		int m = obstacleGrid.size(), n = obstacleGrid[0].size();
		if (obstacleGrid[m - 1][n - 1]) return 0;  //终点为墙不可得
		vector<vector<int>> paths(m, vector<int>(n));
		int sys = 1;
		for (int i = 0; i<m; i++) {          //第一行和第一列初始化，当有任意点出现墙之后，后面的路必不可达
			if (obstacleGrid[i][0]) sys = 0;
			paths[i][0] = sys;
		}
		sys = 1;
		for (int i = 0; i<n; i++) {
			if (obstacleGrid[0][i]) sys = 0;
			paths[0][i] = sys;
		}
		for (int i = 1; i<m; i++)
			for (int j = 1; j<n; j++)
				paths[i][j] = (1 - obstacleGrid[i - 1][j])*paths[i - 1][j] + (1 - obstacleGrid[i][j - 1])*paths[i][j - 1];  //状态转移方程
		return paths[m - 1][n - 1];
	}
};
