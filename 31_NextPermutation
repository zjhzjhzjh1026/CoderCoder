/*********************************************************************************
  *FileName:31_NextPermutation
  *Author:  Javan_Z
  *Version: 1.0
  *Date:  2016.6.5
  12ms, beats 23.36%, fastest 
  idea：
    Step1: Travel from the end of the array to find out the first "i" satisfying nums[i-1]<nums[i];
    Step2: Find the suitable element to swap with the "i" above, that is the smallest digit bigger 
           than nums[i-1], and swap them;
    Step3: To make the new number smallest, we should sort the rest of the array in ascending order,
           which sort function solve it well;
    Step4: If the original number is already shown as ascending order, just check if i equals 0, and
           reverse it~! 
**********************************************************************************/
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i=nums.size()-1,right=nums[i],mark=i;
        while(i>0){     
            if(nums[i-1]<nums[i]){   //递增规律消失之时 
                while(nums[i-1]>=nums[mark])  //找到合适的交换位置 
                  mark--;
                int temp=nums[mark];  
                nums[mark]=nums[i-1];
                nums[i-1]=temp;
                sort(nums.begin()+i,nums.end());  //对交换完右边的部分进行排序，以得到最小数 
                break;
            }
            i--;
        }
        if(!i)
          reverse(nums.begin(),nums.end());  //当已是最大数时逆序 
    }
};
