/*********************************************************************************
  *FileName:33_SearchinRotatedSortedArray_RevisedBinarySearch_includingRecursive 
  *Author:  Javan_Z
  *Version: 1.0
  *Date:  2016.6.8
  4ms, beats 23.97% 
**********************************************************************************/
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low=0,high=nums.size()-1;
        while(low<high){
            int mid=(low+high)/2;
            if(nums[mid]==target)
              return mid;
            if(nums[low]<=nums[mid]){  //一定要=
                if(target>=nums[low]&&target<nums[mid])
                    high=mid-1;    //注意二分查找法这里是mid+1-1，直接=mid会导致无限循环且多与计算 
                else 
                    low=mid+1;
            }
            else{ 
                if(target<nums[low]&&target>nums[mid])  //注意没=且用low而不是high
                    low=mid+1;
                else 
                    high=mid-1;
            }
        }
        if(target==nums[low])    //最后检查一下边缘是否满足 
          return low;
        else 
          return -1;
    }
};
/*class Solution {   //recursive coding
public:
    int search(vector<int>& nums, int target) {
        int left=0,right=nums.size()-1,mid;
        return recur(nums,target,left,right);
        } 
    int recur(vector<int>& nums, int target, int left, int right){
        if(left==right)
          return (target==nums[left])?left:-1;
        int mid=(left+right)/2;
        if(nums[mid]==target)
            return mid;  
        if(nums[left]<=nums[mid]){
                if(target<nums[mid]&&target>=nums[left])
                  return recur(nums,target,left,mid-1);
                else
                  return recur(nums,target,mid+1,right);
            }
         else{
                if(target>nums[mid]&&target<nums[left])
                  return recur(nums,target,mid+1,right);
                else 
                  return recur(nums,target,left,mid-1);
            }
            
    }
};*/
