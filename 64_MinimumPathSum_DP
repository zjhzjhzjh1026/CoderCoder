/*********************************************************************************
*FileName:64_MinimumPathSum_DP
*Author:  Javan_Z
*Version: 1.0
*Date:  2016.8.16
12ms, beats 27.53%ï¼Œfastest
Still Dynamic Programming problem, State Transition Equation:
minCost[i][j]=min(minCost[i-1][j],minCost[i][j-1])+grid[i][j];
**********************************************************************************/
class Solution {
public:
	int minPathSum(vector<vector<int>>& grid) {
		int m = grid.size(), n = grid[0].size();
		vector<vector<int>> minCost(m, vector<int>(n));
		minCost[0][0] = grid[0][0];
		for (int i = 1; i<m; i++)
			minCost[i][0] = grid[i][0] + minCost[i - 1][0];
		for (int i = 1; i<n; i++)
			minCost[0][i] = grid[0][i] + minCost[0][i - 1];
		for (int i = 1; i<m; i++)
			for (int j = 1; j<n; j++) {
				minCost[i][j] = min(minCost[i - 1][j], minCost[i][j - 1]) + grid[i][j];
				// cout<<i<<"|"<<j<<"|"<<"mincost:"<<minCost[i][j]<<endl;
			}
		return minCost[m - 1][n - 1];
	}
};
