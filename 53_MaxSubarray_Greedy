/*********************************************************************************
*FileName:53_MaxSubarray_Greedy
*Author:  Javan_Z
*Version: 2.0
*Date:  2016.7.22
8ms, beats 75.19%
The idea is to add every element one by one, and clear the sum when sum is below zero.
**********************************************************************************/
class Solution {
public:
	int maxSubArray(vector<int>& nums) {
		int ans = nums[0], sum = 0, len = nums.size();
		for (int i = 0; i<len; i++) {
			sum += nums[i];
			ans = max(ans, sum);
			if (sum<0)    //clear the negative sum
				sum = 0;
		}
		return ans;
	}
};

/*****Another greedy solution from qddpx
The idea is to find the largest difference between the sums when you summing up the array from left to right. 
The largest difference corresponds to the sub-array with largest sum.   （0~x - 0~x1）最大

class Solution {
public:
    int maxSubArray(int A[], int n) {
        int sum = 0, min = 0, res = A[0];
        for(int i = 0; i < n; i++) {
            sum += A[i];
            if(sum - min > res) res = sum - min;
            if(sum < min) min = sum;
        }
        return res;
    }
};
*/
