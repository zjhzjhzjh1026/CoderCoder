/*********************************************************************************
*FileName:106_ConstructBinaryTreeFromInorder&PostorderTraverse
*Author : Javan_Z
*Version : 1.0
*Date : 2016.9.26
**********************************************************************************/
/**
* Definition for a binary tree node.
* struct TreeNode {
*     int val;
*     TreeNode *left;
*     TreeNode *right;
*     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
* };
*/
class Solution {
public:
	TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
		return buildTree(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1);
	}

	TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder, int is, int ie, int ps, int pe) {
		if (ps>pe) return nullptr;
		TreeNode* node = new TreeNode(postorder[pe]);
		int j;
		for (int i = is; i <= ie; i++)
			if (node->val == inorder[i]) {
				j = i;
				break;
			}
		//cout<<is<<ie<<ps<<pe<<j<<endl;
		node->left = buildTree(inorder, postorder, is, j - 1, ps, ps + j - is - 1);
		node->right = buildTree(inorder, postorder, j + 1, ie, ps + j - is, pe - 1);
		return node;
	}
};
