/*********************************************************************************
  *FileName: 1_TwoSum_Qsort_binartSearch
  *Author:  WILL
  *Version: 2.0
  *Date:  2016.4.19
  QuickSort plus binarySearch resolution,,O(nlogn)?    LC 20.67%
**********************************************************************************/
class Solution {
public:

   void quickSort(vector<int> &a,int low,int high,vector<int>& symbol){  //快排   O(nlogn)
    if(low>=high)    //一定要有，，否则会段违例 ~！~~ 
     return;
    int i=low;
    int j=high; 
    int temp=a[low];
    int temp_symbol=symbol[low];
    while(i<j){
      while(i<j&&a[j]>=temp)
        {j--;}
      a[i]=a[j];             //移位数据同时记录下标号的交换 
      symbol[i]=symbol[j];
      
      
      while(i<j&&a[i]<=temp)
        {i++;}
      a[j]=a[i]; 
      symbol[j]=symbol[i];
     
    }   
    a[i]=temp; //put temp back
    symbol[i]=temp_symbol;
    quickSort(a,low,i-1,symbol);        //对左右子序列递归调用 
    quickSort(a,i+1,high,symbol);     
} 

int binary_search(vector<int> &a,int low,int high,int target){   //二分查找 O（logn） 
    if(low>high) 
      return -1;
    int mid=low+(high-low)/2;
    if(a[mid]==target)
       return mid;
    else if(a[mid]>target)
       {
       return binary_search(a,low,mid-1,target);
       }
    else{ 
    return binary_search(a,mid+1,high,target);
    } 
}

    vector<int> twoSum(vector<int>& nums, int target) {      
        vector<int> ans,symbol(nums.size());    //symbol对象记录排序时交换的下标号 
        int i,j,tar_left,ser,t;
        t=nums.size();
        for(i=0;i<nums.size();i++){
          symbol[i]=i;
        }
        quickSort(nums,0,nums.size()-1,symbol);  
        for(i=0;i<nums.size();i++){
          tar_left=target-nums[i]; 
          ser=binary_search(nums,i+1,nums.size()-1,tar_left);
          if(ser!=-1){
             ans.push_back(symbol[i]);                    //最后输出并不用保证下标大小先后顺序 
             ans.push_back(symbol[ser]);
             return ans;
          }
        }
    }
};
